<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_8821_glide_utils.query</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>query</name>
        <script><![CDATA[var query = Class.create();
query.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	isEnabled: function(){
		return gs.getProperty('x_8821_glide_utils.enable.query') === "true";
	},
	row: function(){
		// Example usage
		/*
		var ga = new GlideAjax('x_8821_glide_utils.query');
		ga.addParam('sysparm_name', 'row');
		ga.addParam('sysparm_obj', JSON.stringify({
		  table:"sys_user",//required
		  fields: ["user_name","active"],//required
		  query: "user_nameLIKEa",//optional
		  limit: 5//optional
		}));
		ga.getXML(function(response){
			var responseDocument = response.responseXML.documentElement;
			var answer = responseDocument.getAttribute('answer');
			var serverObj = JSON.parse(answer);
			console.log(serverObj);
		});

		*/
		if(this.isEnabled()){
			var queryObj = JSON.parse(this.getParameter('sysparm_obj'));
			var returnObj = {
				status: 'initialized'
			};
			if (!queryObj.table) {
				returnObj = {
					status: 'error',
					reason: 'No table defined'
				};
			} else {
				returnObj.table = queryObj.table;
			}
			if (!queryObj.fields || queryObj.fields.length === 0) {
				returnObj = {
					status: 'error',
					reason: 'No fields defined'
				};
			} else {
				returnObj.query = queryObj.query;
			}
			if (returnObj.status === 'initialized') {
				returnObj.status = 'success';
				returnObj.rows = this._row(queryObj);
			}
			return JSON.stringify(returnObj);
		} else {
			gs.error('Propery x_8821_glide_utils.enable.query is not enabled');
		}
	},
	_row: function(queryObj){
		if(this.isEnabled()){
			try {
				var returnRows = [];
				var gr = new GlideRecordSecure(queryObj.table);
				if (queryObj.query) {
					gr.addEncodedQuery(queryObj.query);
				}
				if (queryObj.limit) {
					gr.setLimit(queryObj.limit);
				}
				gr.query();
				gs.info(JSON.stringify(queryObj));
				gs.info("gr.hasNext(): " + gr.hasNext());
				while (gr.next()) {
					var row = {};
					queryObj.fields.map(function(field) {
						gs.info("Looping over fields, on " + field);
						row[field] = {};
						if (gr.isValidField(field)) {
							gs.info(field + " is a valid field");
							row[field].value = gr.getValue(field);
							row[field].display = gr[field].getDisplayValue();
						} else {
							gs.info(field + " is not a valid field");
							if (field.indexOf('.') > 0) {
								gs.info("field contains .");
								var fieldsArr = field.split('.');

								if (fieldsArr.length > 2) {
									row[field].error = 'Cannot dot-walk more than one-level';
								} else {
									//GlideRecord only allows for one nested level it seems
									row[field].value = gr[fieldsArr[0]][fieldsArr[1]].toString(); //getValue isnt a thing in scopes i guess
									row[field].display = gr[fieldsArr[0]][fieldsArr[1]].getDisplayValue();
								}
								//fieldsArr = ["manager.department"]
								// the below doesnt work, but the idea to allow n number of .'s	where n is infinity
								/*
						row[field].debug = [];
						fieldsArr.map(function(dotField){
							gs.info("Looping over dotfield: " + dotField);
							gs.info("gr[dotField].getReferenceTable(): " + gr[dotField].getReferenceTable());
							gs.info("gr[dotField].getValue(): " + gr[dotField].getValue());
							var faGR = new GlideRecord(gr[dotField].getReferenceTable());
							if(faGR.get(gr[dotField].getValue())){
								gs.info("IN GET of faGR"+faGR[dotField].getValue())
								// {"manager: {department: }}
								row[field][dotField]= {
									value: faGR[dotField].getValue(),
									display: faGR[dotField].getDisplayValue()
								};

							} else {
								gs.info("COULD NOT FIND faGR by sysid");
							}
						})
						*/
							} else {
								row[field].error = 'not a valid field';
							}
						}
					}); //no functions in a loop... really?!
					returnRows.push(row);
				}
				return returnRows;
			} catch (error) {
				return error;
			}
		} else {
			gs.error('Propery x_8821_glide_utils.enable.query is not enabled');
		}
	},
	type: 'query'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jace.benson@protonmail.com</sys_created_by>
        <sys_created_on>2018-07-20 01:51:38</sys_created_on>
        <sys_id>8420ae930f579300fc69cdbce1050ee6</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>query</sys_name>
        <sys_package display_value="Glide Utils" source="x_8821_glide_utils">e46761ba0f521300fc69cdbce1050e46</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Glide Utils">e46761ba0f521300fc69cdbce1050e46</sys_scope>
        <sys_update_name>sys_script_include_8420ae930f579300fc69cdbce1050ee6</sys_update_name>
        <sys_updated_by>jace.benson@protonmail.com</sys_updated_by>
        <sys_updated_on>2018-07-20 02:18:56</sys_updated_on>
    </sys_script_include>
</record_update>
