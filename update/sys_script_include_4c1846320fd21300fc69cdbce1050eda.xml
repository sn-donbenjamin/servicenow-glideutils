<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_8821_glide_utils.variableHelper</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>variableHelper</name>
        <script><![CDATA[var variableHelper = Class.create();
variableHelper.prototype = {
	/*Example call**/
	/*
	var current = new GlideRecord('change_request');
	current.get('c286d61347c12200e0ef563dbb9a71df');
	var vh = new x_8821_glide_utils.variableHelper();
	var vars = vh.getVariables(current);
	var printable = JSON.stringify(vars);
	gs.info(printable);

	var current = new GlideRecord('sc_req_item');
	current.get('257c82740f4b1300fc69cdbce1050ea2');
	var vars = vh.getVariables(current);
	var printable = JSON.stringify(vars);
	gs.info(printable);

	*/
	/***/
	initialize: function() {
		this.variableOptions= {
			returnEmpty: false,
			includeThese: {
				"1": "string",//yes/no
				"2": "string",//multi-line text
				"3": "string",//multiple choice
				"4": "string",//numeric scale
				"5": "select",//select box
				"6": "string",//single line text
				"7": "string",//checkbox
				"8": "reference",//reference
				"9": "string",//date
				"10": "string",//date time
				//"11":"string",//label
				//"12":"string",//break
				//"13":"string",//not listed
				//"14":"string",//macro
				//"15":"string",//ui page
				"16": "string",//wide single line text
				//17:"string",//macro w/label
				"18": "lookupSelectBox",//lookup select box
				//"19":"string",//container start
				//"20":"string",//container end
				"21": "listCollector",//list collector
				"22": "string"//lookup multiplechoice
			},
		};
	},
	example: function(){
		var current = new GlideRecord('change_request');
		current.get('c286d61347c12200e0ef563dbb9a71df');
		var vh = new x_8821_glide_utils.variableHelper();
		var vars = vh.getVariables(current);
		gs.info(JSON.stringify(vars));

		var current2 = new GlideRecord('sc_req_item');
		current2.get('257c82740f4b1300fc69cdbce1050ea2');
		var vars2 = vh.getVariables(current);
		gs.info(JSON.stringify(vars));

	},
	getVariables: function(current){
		var returnArr = [];
		var table = current.getTableName();
		if(table === 'sc_req_item'){
			returnArr = this._getVariables(current);
		} else if (table === 'sc_task'){
			// goto sc_req_item
			var record = new GlideRecord('sc_req_item');
			record.get(current.getValue('request_item'));
			returnArr = this._getVariables(record);
		} else {
			returnArr = this._getQuestionAnswers(current);
		}
		return returnArr;
	},
	_getQuestionAnswers: function(current){
		var vars = [];
		var v = new GlideRecord('question_answer');
		v.orderBy('order');
		v.addQuery('table_name', current.getTableName());
		v.addQuery('table_sys_id', current.getValue('sys_id'));
		v.query();
		//question.type=8
		while(v.next()){
			if (v.value.getDisplayValue() != '' || this.variableOptions.returnEmpty) { /*if the value is blank, don't print*/
				for(var varType in this.variableOptions.includeThese){
					if(v.question.type == varType){
						if(this.variableOptions.includeThese[varType] === "string"){
							vars.push({
								label: v.question.getDisplayValue(),
								value: v.value.getDisplayValue(),
								order: v.order.getDisplayValue()
							});
						}
						if(this.variableOptions.includeThese[varType] === "select"){
							var questionValue = '';
							var question_choice = new GlideRecord('question_choice');
							question_choice.addQuery('question', v.question.toString());
							question_choice.addQuery('value', v.question.toString());
							question_choice.query();
							if(question_choice.next()){
								questionValue = question_choice.getValue('text');//if its a choice
							} else {
								questionValue = v.value.getDisplayValue();//if it cant be found show value stored
							}
							vars.push({
								label: v.question.getDisplayValue(),
								value: questionValue,
								order: v.question.order.getDisplayValue()
							});
						}

						if(this.variableOptions.includeThese[varType] === "reference"){
							var referencegr = new GlideRecord(v.question.reference);
							referencegr.addQuery('sys_id', '=', v.value);
							referencegr.query();
							if (referencegr.next()) {
								vars.push({
									label: v.question.getDisplayValue(),
									value: referencegr.getDisplayValue(),
									order: v.order.getDisplayValue()
								});
							} else { // if the value is invalid or set to a string that has no matching record.
								vars.push({
									label: v.question.getDisplayValue(),
									value: v.value.getDisplayValue(),
									order: v.order.getDisplayValue()
								});
							}
						}
						if(this.variableOptions.includeThese[varType] === "lookupSelectBox"){
							var lsbgr = new GlideRecord(v.question.item_option_new.lookup_table);
							lsbgr.addQuery('sys_id', '=', v.question.value);
							lsbgr.query();
							if (lsbgr.next()) {
								vars.push({
									label: v.question.getDisplayValue(),
									value: lsbgr.getDisplayValue(),
									order: v.order.getDisplayValue()
								});
							} else { // if the value is invalid or set to a string that has no matching record.
								vars.push({
									label: v.question.getDisplayValue(),
									value: v.value.getDisplayValue(),
									order: v.order.getDisplayValue()
								});
							}
						}
						if(this.variableOptions.includeThese[varType] === "listCollector"){
							var listArray = v.value.getDisplayValue().split(',');
							var listValues = [];
							vtp += '<p><b>' + v.question.getDisplayValue() + '</b></p>\n';
							for (i = 0; i < listArray.length; i = i + 1) {
								var igr = new GlideRecord(v.question.item_option_new.list_table);
								igr.addQuery('sys_id', '=', listArray[i]);
								igr.query();
								if (igr.next()) {
									listValues.push(igr.getDisplayValue());//displayValues
								}
								//vtp +=  'i = ' + i + '- ' + listarray<i> + '\n';//sys_ids
							}
							vars.push({
								label: v.question.getDisplayValue(),
								value: listValues,
								order: v.order.getDisplayValue()
							});
						}
					}
				}
			}
		}
		return vars;
	},
	_getVariables: function(current){
		var vars = [];
		var v = new GlideRecord('sc_item_option_mtom');
		v.addQuery('request_item', current.getValue('sys_id'));
		v.orderBy('sc_item_option.order');
		v.query();
		while (v.next()) {
			/*
				* This code dynamically pulls the questions from the forms in the order they are presented (numerically)
				* and then displays them in a consistant readable format.
				* Right now nothing links to any records but can with some slight changes to this code.
				*/
			if (v.sc_item_option.value.getDisplayValue() != '' || this.variableOptions.returnEmpty) { /*if the value is blank, don't print*/
				for(var varType in this.variableOptions.includeThese){
					if(v.sc_item_option.item_option_new.type == varType){
						if(this.variableOptions.includeThese[varType] === "string"){
							vars.push({
								label: v.sc_item_option.item_option_new.getDisplayValue(),
								value: v.sc_item_option.value.getDisplayValue(),
								order: v.sc_item_option.order.getDisplayValue()
							});
						}
						if(this.variableOptions.includeThese[varType] === "select"){
							var questionValue = '';
							var question_choice = new GlideRecord('question_choice');
							question_choice.addQuery('question', v.sc_item_option.item_option_new.toString());
							question_choice.addQuery('value', v.sc_item_option.value.toString());
							question_choice.query();
							if(question_choice.next()){
								questionValue = question_choice.getValue('text');//if its a choice
							} else {
								questionValue = v.sc_item_option.value.getDisplayValue();//if it cant be found show value stored
							}
							vars.push({
								label: v.sc_item_option.item_option_new.getDisplayValue(),
								value: questionValue,
								order: v.sc_item_option.order.getDisplayValue()
							});
						}

						if(this.variableOptions.includeThese[varType] === "reference"){
							var referencegr = new GlideRecord(v.sc_item_option.item_option_new.reference);
							referencegr.addQuery('sys_id', '=', v.sc_item_option.value);
							referencegr.query();
							if (referencegr.next()) {
								vars.push({
									label: v.sc_item_option.item_option_new.getDisplayValue(),
									value: referencegr.getDisplayValue(),
									order: v.sc_item_option.order.getDisplayValue()
								});
							} else { // if the value is invalid or set to a string that has no matching record.
								vars.push({
									label: v.sc_item_option.item_option_new.getDisplayValue(),
									value: v.sc_item_option.value.getDisplayValue(),
									order: v.sc_item_option.order.getDisplayValue()
								});
							}
						}
						if(this.variableOptions.includeThese[varType] === "lookupSelectBox"){
							var lsbgr = new GlideRecord(v.sc_item_option.item_option_new.lookup_table);
							lsbgr.addQuery('sys_id', '=', v.sc_item_option.value);
							lsbgr.query();
							if (lsbgr.next()) {
								vars.push({
									label: v.sc_item_option.item_option_new.getDisplayValue(),
									value: lsbgr.getDisplayValue(),
									order: v.sc_item_option.order.getDisplayValue()
								});
							} else { // if the value is invalid or set to a string that has no matching record.
								vars.push({
									label: v.sc_item_option.item_option_new.getDisplayValue(),
									value: v.sc_item_option.value.getDisplayValue(),
									order: v.sc_item_option.order.getDisplayValue()
								});
							}
						}
						if(this.variableOptions.includeThese[varType] === "listCollector"){
							var listArray = v.sc_item_option.value.getDisplayValue().split(',');
							var listValues = [];
							vtp += '<p><b>' + v.sc_item_option.item_option_new.getDisplayValue() + '</b></p>\n';
							for (i = 0; i < listArray.length; i = i + 1) {
								var igr = new GlideRecord(v.sc_item_option.item_option_new.list_table);
								igr.addQuery('sys_id', '=', listArray[i]);
								igr.query();
								if (igr.next()) {
									listValues.push(igr.getDisplayValue());//displayValues
								}
								//vtp +=  'i = ' + i + '- ' + listarray<i> + '\n';//sys_ids
							}
							vars.push({
								label: v.sc_item_option.item_option_new.getDisplayValue(),
								value: listValues,
								order: v.sc_item_option.order.getDisplayValue()
							});
						}
					}
				}

			}
		}
		return vars;
	},
	type: 'variableHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jace.benson@protonmail.com</sys_created_by>
        <sys_created_on>2018-05-29 18:24:35</sys_created_on>
        <sys_id>4c1846320fd21300fc69cdbce1050eda</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>variableHelper</sys_name>
        <sys_package display_value="Glide Utils" source="x_8821_glide_utils">e46761ba0f521300fc69cdbce1050e46</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Glide Utils">e46761ba0f521300fc69cdbce1050e46</sys_scope>
        <sys_update_name>sys_script_include_4c1846320fd21300fc69cdbce1050eda</sys_update_name>
        <sys_updated_by>jace.benson@protonmail.com</sys_updated_by>
        <sys_updated_on>2018-07-13 19:15:18</sys_updated_on>
    </sys_script_include>
</record_update>
